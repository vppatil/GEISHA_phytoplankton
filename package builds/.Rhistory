csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
head(csrTraits)
head(mfgTraits)
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
head(mfgTraits)
str(mfgTraits)
#keep all species- assign NA if no trait values are available
actonspp<-merge(actonspp,csrTraits,all.x=T)
actonspp<-merge(actonspp,mfgTraits,all.x=T)
head(actonspp)
actonspp<-traits_to_mfg_df(actonspp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
head(actonspp)
acton<-read.csv('~/gleon/Geisha/datasets/phyto_data/RawPhytoData_Acton_QAQC_18Jan2018.csv')
#create a list of unique species names from the lake
actonspp<-data.frame(phyto_name=unique(acton$phyto_name))
#separate out genus and species, and clean up name formatting
actonspp<-genus_species_extract(actonspp,'phyto_name')
#load csr and mfg trait databases
data("csrTraits")
data("mfgTraits")
#merge trait data into species data
csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
#keep all species- assign NA if no trait values are available
actonspp<-merge(actonspp,csrTraits,all.x=T)
actonspp<-merge(actonspp,mfgTraits,all.x=T)
actonspp$MFG<-traits_to_mfg_df(actonspp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
head(actonspp)
#' Assign MFG based on binary functional traits and taxonomy (Class and Order)
#'
#' @param flagella 1 if flagella are present, 0 if they are absent.
#' @param size Character string: 'large' or 'small'. Classification criteria is left to the user.
#' @param colonial 1 if typically colonial growth form, 0 if typically unicellular.
#' @param filament 1 if dominant growth form is filamentous, 0 if not.
#' @param centric 1 if diatom with centric growth form, 0 if not. NA for  non-diatoms.
#' @param gelatinous 1 mucilagenous sheath is typically present, 0 if not.
#' @param aerotopes 1 if aerotopes allowing buoyancy regulation are typically present, 0 if not.
#' @param class Character string: The taxonomic class of the species
#' @param order Character string: The taxonomic order of the species
#'
#' @export traits_to_mfg
#'
#' @return A character string of the species' morphofunctional group
#'
#' @examples
#' traits_to_mfg(flagella = 1,size = "large",colonial = 1,filament = 0,centric = NA,gelatinous = 0,
#'                aerotopes = 0,class = "Euglenophyceae",order = "Euglenales")
traits_to_mfg <- function(flagella = NA,
size = NA,
colonial = NA,
filament = NA,
centric = NA,
gelatinous = NA,
aerotopes = NA,
class = NA,
order = NA)
{
mfg = NA
if(flagella %in% 1 &
class %in% c("Bacillariophyceae",
"Coscinodiscophyceae",
"Mediophyceae",
"Fragilariophyceae")==F) {
#making sure that diatoms are excluded from this branch
if (order %in% c("Volvocales",
"Chlamydomonadales")){
if (colonial %in% 1) {
mfg = "3b-ColoPhyto"
}
else {
mfg = "3a-UnicPhyto"
}
}else if(class %in% 'Cryptophyceae'){
#ensures that all motile cryptophytes go to 2d.
mfg =  "2d-Crypto"
}else
if (size %in% "large") {
if (class %in% c("Chrysophyceae",
"Haptophyceae",
"Synurophyceae",
"Phaeothamniophyceae")) {
mfg = "1a-LargeChry"
}
else
if (class %in% "Dinophyceae") {
mfg = "1b-LargeDino"
}
else if (class %in% 'Euglenophyceae'){
mfg = "1c-LargeEugl"
}
}
else if(size %in% "small"){
if (class %in% c("Chrysophyceae",
"Haptophyceae",
"Synurophyceae",
"Phaeothamniophyceae")) {
mfg = "2a-SmallChry1"
}
else
if (class %in% "Dinophyceae"){
mfg = "2b-SmallDino"
}
else
if (class %in% "Euglenophyceae") {
mfg = "2c-SmallEugl"
}
}
else {
mfg = NA
}
}
# first node break: flagella == 0
else {
if (class %in% c("Cyanophyceae",
"Cyanobacteria")){
if (order %in% "Nostocales"){
mfg = "5e-Nostocales"
}
else
if (colonial %in% 1){
if (order %in% "Oscillatoriales"){
mfg = "5a-FilaCyano"
}
else
if (size %in% "large") {
if (aerotopes %in% 1){
mfg = "5b-LargeVacC"
}
else {
mfg = "5c-OtherChroo"
}
}
else if (size %in% "small"){
mfg = "5d-SmallChroo"
}
}
else {
mfg = "4-UnicCyano"
}
}
else
if (class %in% c("Bacillariophyceae",
"Coscinodiscophyceae",
"Mediophyceae",
"Fragilariophyceae")){
if (size %in% "large") {
if (centric %in% 1) {
if (colonial %in% 1) {
mfg = "6a1-LColCent"
}
else {
mfg = "6a2-LUniCent"
}
}
else {
if (colonial %in% 1){
mfg = "6b1-LColPenn"
}
else {
mfg = "6b2-LUniPenn"
}
}
}
else{
if (centric %in% 1) {
mfg = "7a-SmallCent"
}
else {
mfg = "7b-SmallPenn"
}
}
}
else
if (colonial %in% 1){
if (filament %in% 1) {
if (class %in% c("Chlorophyceae",
"Ulvophyceae",
"Trebouxiophyceae")){
mfg = "10a-FilaChlorp"
}
else
if (class %in% c("Conjugatophyceae",
"Zygnematophyceae")){
mfg = "10b-FilaConj"
}
else
if (class %in% c("Xanthophyceae",
"Eustigmatophyceae")){
mfg = "10c-FilaXant"
}
}
else
if (order %in% c("Chlorococcales",
"Chlamydomonadales",
"Tetrasporales")) {
if (gelatinous %in% 1) {
mfg = "11b-GelaChlor"
}
else {
mfg = "11a-NakeChlor"
}
}
else {
mfg = "11c-OtherCol"
}
}
else
if (size %in% "large") {
if (class %in% c("Chlorophyceae",
"Conjugatophyceae",
"Zygnematophyceae")) {
mfg = "8a-LargeCoCh"
}
else {
mfg = "8b-LargeUnic"
}
}
else {
if (class %in% c("Conjugatophyceae",
"Zygnematophyceae")){
mfg = "9a-SmallConj"
}
else
if (order %in% "Chlorococcales") {
mfg = "9b-SmallChlor"
}
else
if (class %in% c("Chrysophyceae",
"Synurophyceae",
"Phaeothamniophyceae")) {
mfg = "9c-SmallChry2"
}
else
if(!is.na(class) & !is.na(order))
{
mfg = "9d-SmallUnic"
}
}
}
return(mfg)
}
#read in the data file you want to classify
acton<-read.csv('~/gleon/Geisha/datasets/phyto_data/RawPhytoData_Acton_QAQC_18Jan2018.csv')
#create a list of unique species names from the lake
actonspp<-data.frame(phyto_name=unique(acton$phyto_name))
#separate out genus and species, and clean up name formatting
actonspp<-genus_species_extract(actonspp,'phyto_name')
#load csr and mfg trait databases
data("csrTraits")
data("mfgTraits")
#merge trait data into species data
csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
#keep all species- assign NA if no trait values are available
actonspp<-merge(actonspp,csrTraits,all.x=T)
actonspp<-merge(actonspp,mfgTraits,all.x=T)
actonspp$MFG<-traits_to_mfg_df(actonspp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
head(actonspp$MFG)
head(actonspp)
traits_to_mfg()
setwd('C:/Users/vpatil/Documents/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/spp to mfg and mfg to csr functions')
expanded<-read.csv('expanded_mfg_library.csv')
old<-read.csv('old_mfg_library.csv')
newsize<-read.csv('newsize_mfg_library_add.csv')
expanded$genus<-gsub('Limnotrix','Limnothrix',expanded$genus)
length(table(unique(expanded$genus)))
length(table(unique(old$genus)))
length(table(unique(newsize$genus)))
expanded$genspp<-paste(expanded$genus,expanded$species)
old$genspp<-paste(old$genus,old$species)
newsize$genspp<-paste(newsize$genus,newsize$species)
length(table(unique(expanded$genspp)))
length(table(unique(old$genspp)))
length(table(unique(newsize$genspp)))
table(old$genspp %in% expanded$genspp)
table(newsize$genspp %in% expanded$genspp)
#next- does expanded include kasumigaura data?
#what about jennie gapfilling?
setwd('~/gleon/Geisha/jennie MFG/')
kasu<-read.csv('MFGSpeciesList_Kasumigaura_QAQC_17Aug2017.csv')
library(readxl)
jennie.1<-read.csv('Arch_miscellanea_MFGs_vp.csv')
library(algaeClassify)
jennie.1<-genus_species_extract(jennie.1,'Taxa')
jennie.2<-read_xlsx('Jennie MFG gapfill.xlsx',sheet = 1)
length(table(kasu$genus))
length(table(jennie.1$genus))
length(table(jennie.2$genus))
table(kasu$genus %in% expanded$genus)
table(jennie.1$genus %in% expanded$genus)
table(jennie.2$genus %in% expanded$genus)
kasu$genspp<-paste(kasu$genus,kasu$species)
jennie.1$genspp<-paste(jennie.1$genus,jennie.1$species)
jennie.2$genspp<-paste(jennie.2$genus,jennie.2$species)
kasu$genspp<-trimws(kasu$genspp)
jennie.1$genspp<-trimws(jennie.1$genspp)
jennie.2$genspp<-trimws(jennie.2$genspp)
table(expanded$genspp %in% jennie.1$genspp | expanded$genspp %in% jennie.2$genspp)
table(jennie.1$Source)
table(jennie.2$Source)
#start with expanded
#add in from each additional mfg df
#if genspp is dup & expanded$source==NA, replace with new version that has source
#then, figure out sources for remaining taxa from expanded
expanded$source=NA
expanded<-expanded[!duplicated(expanded$genspp),]
names(kasu)
kasu$MFG<-kasu$MFG.orig.name
kasu$MFG[is.na(kasu$MFG)]<-kasu$MFG.algaebase.name[is.na(kasu$MFG)]
kasu$old.new='new'
kasu$genspp<-paste(kasu$genus,kasu$species)
kasu$genspp<-trimws(kasu$genspp)
kasu$source<-'Salmaso Geisha Powell Center Workshop'
kasu<-subset(kasu,select=c('genus','species','MFG','old.new','genspp','source'))
expanded2<-rbind(expanded,kasu)
dups<-unique(expanded2$genspp[duplicated(expanded2$genspp)])
rm.rows=ifelse(expanded2$genspp %in% dups & is.na(expanded2$source),1,0)
expanded2=expanded2[rm.rows==0,]
jennie.1$old.new<-'new'
jennie.1<-subset(jennie.1,select=c('genus','species','MFG','old.new','genspp','Source'))
names(jennie.1)<-names(expanded2)
expanded3<-rbind(expanded2,jennie.1)
dups<-unique(expanded3$genspp[duplicated(expanded3$genspp)])
rm.rows=ifelse(expanded3$genspp %in% dups & is.na(expanded3$source),1,0)
expanded3=expanded3[rm.rows==0,]
jennie.2<-as.data.frame(jennie.2)
jennie.2$old.new<-'new'
jennie.2$genspp<-gsub(' NA','',jennie.2$genspp)
jennie.2$species[is.na(jennie.2$species)]=''
jennie.2<-subset(jennie.2,select=c('genus','species','MFG','old.new','genspp','Source'))
names(jennie.2)<-names(expanded3)
expanded4<-rbind(expanded3,jennie.2)
dups<-unique(expanded4$genspp[duplicated(expanded4$genspp)])
rm.rows=ifelse(expanded4$genspp %in% dups & is.na(expanded4$source),1,0)
expanded4=expanded4[rm.rows==0,]
genus.only<-table(expanded4$genus,is.na(expanded4$source))
zero.genus<-genus.only[genus.only[,2]>0 & genus.only[,1]==0,]
zero.genus2<-genus.only[apply(genus.only,1,sum)==2,]
write.csv(zero.genus,'zerogenus.csv')
expanded4$source<-gsub(')','',expanded4$source)
expanded4$source[grep('algaebase',expanded4$source)]='Algaebase'
expanded4$source[grep('diatoms.org',expanded4$source)]='Western Diatoms of North America'
expanded4$source[grep('Li et al.',expanded4$source)]='Li et al. 2018'
expanded4$source[grep('http://cfb.unh.edu/phycokey/',expanded4$source)]='Phycokey'
expanded4$source[grep('not in algaebase',expanded4$source)]=NA
expanded4$source[grep('Rimet et al.',expanded4$source)]='Rimet et al. 2018'
expanded4$source<-gsub(' and ',' & ',expanded4$source)
expanded4$source[grep('Tolotti et al.',expanded4$source)]='Tolotti et al. 2010'
expanded4$source[grep('Salmaso & Padisak',expanded4$source)]='Salmaso & Padisak 2007'
expanded4$source[grep('Freshwater Algae',expanded4$source)]='Freshwater Algae of North America'
expanded4$source[grep('McGregor 2001',expanded4$source)]='McGregor 2001'
expanded4$MFG[expanded4$MFG=='6a']='6a1'
expanded4$MFG[grep('1a',expanded4$MFG)]='1a-LargeChry'
expanded4$MFG[grep('1b',expanded4$MFG)]='1b-LargeDino'
expanded4$MFG[grep('1c',expanded4$MFG)]='1c-LargeEugl'
expanded4$MFG[grep('2a',expanded4$MFG)]='2a-SmallChry1'
expanded4$MFG[grep('2b',expanded4$MFG)]='2b-SmallDino'
expanded4$MFG[grep('2c',expanded4$MFG)]='2c-SmallEugl'
expanded4$MFG[grep('2d',expanded4$MFG)]='2d-Crypto'
expanded4$MFG[grep('3a',expanded4$MFG)]='3a-UnicPhyto'
expanded4$MFG[grep('3b',expanded4$MFG)]='3b-ColoPhyto'
expanded4$MFG[grep('4',expanded4$MFG)]='4-UnicCyano'
expanded4$MFG[grep('5a',expanded4$MFG)]='5a-FilaCyano'
expanded4$MFG[grep('5b',expanded4$MFG)]='5b-LargeVacC'
expanded4$MFG[grep('5c',expanded4$MFG)]='5c-OtherChroo'
expanded4$MFG[grep('5d',expanded4$MFG)]='5d-SmallChroo'
expanded4$MFG[grep('6a1',expanded4$MFG)]='6a1-LColCent'
expanded4$MFG[grep('6a2',expanded4$MFG)]='6a2-LUniCent'
expanded4$MFG[grep('6b1',expanded4$MFG)]='6b1-LColPenn'
expanded4$MFG[grep('6b2',expanded4$MFG)]='6b2-LUniPenn'
expanded4$MFG[grep('7a',expanded4$MFG)]='7a-SmallCent'
expanded4$MFG[grep('7b',expanded4$MFG)]='7b-SmallPenn'
expanded4$MFG[grep('8a',expanded4$MFG)]='8a-LargeCoCh'
expanded4$MFG[grep('8b',expanded4$MFG)]='8b-LargeUnic'
expanded4$MFG[grep('9a',expanded4$MFG)]='9a-SmallConj'
expanded4$MFG[grep('9b',expanded4$MFG)]='9b-SmallChlor'
expanded4$MFG[grep('9c',expanded4$MFG)]='9c-SmallChry2'
expanded4$MFG[grep('9d',expanded4$MFG)]='9d-SmallUnic'
expanded4$MFG[grep('10a',expanded4$MFG)]='10a-FilaChlorp'
expanded4$MFG[grep('10b',expanded4$MFG)]='10b-FilaConj'
expanded4$MFG[grep('10c',expanded4$MFG)]='10c-FilaXant'
expanded4$MFG[grep('11a',expanded4$MFG)]='11a-NakeChlor'
expanded4$MFG[grep('11b',expanded4$MFG)]='11b-GelaChlor'
expanded4$MFG[grep('11c',expanded4$MFG)]='11c-OtherCol'
expanded4=expanded4[expanded4$MFG!='' & !is.na(expanded4$MFG),]
expanded4$genus<-gsub('Limnotrix','Limnothrix',expanded4$genus)
expanded4$genus<-gsub('Stefanodiscus','Stephanodiscus',expanded4$genus)
expanded4$genus<-gsub('Terastrum','Tetrastrum',expanded4$genus)
expanded4$genspp<-gsub('Limnotrix','Limnothrix',expanded4$genspp)
expanded4$genspp<-gsub('Stefanodiscus','Stephanodiscus',expanded4$genspp)
expanded4$genspp<-gsub('Terastrum','Tetrastrum',expanded4$genspp)
expanded4<-expanded4[,names(expanded4) %in% 'old.new'==FALSE,]
zerogenus.filled<-read.csv('zerogenus_filled.csv')
head(zerogenus.filled)
matches=match(zerogenus.filled$genus,expanded4$genus)
expanded4$source[matches]=zerogenus.filled$Source
expanded4$genspp<-trimws(expanded4$genspp)
#merge in zero.genus filled with sources.
##now, if there is an entry that has no source,#
#but there is a nother species from the genus with a source, match
#first, get list of genera with a source
nona<-expanded4[!is.na(expanded4$source),]
nona<-nona[!duplicated(nona$genus),]
expanded4<-expanded4[order(expanded4$genus),]
expanded4$genus<-gsub('"','',expanded4$genus)
expanded4$species<-gsub('"','',expanded4$species)
expanded4$genspp<-gsub('"','',expanded4$genspp)
expanded4$species<-gsub('sp.','',expanded4$species)
for(i in 1:dim(expanded4)[1])
{
if(is.na(expanded4$source[i]) & expanded4$genus[i] %in% nona$genus)
{
expanded4$source[i]=nona$source[match(expanded4$genus[i],nona$genus)]
}
}
expanded4<-expanded4[!duplicated(expanded4),]
expanded4<-expanded4[!is.na(expanded4$source),]
expanded4$source<-iconv(expanded4$source, to='ASCII//TRANSLIT')
expanded4[expanded4$genus=='Aulacoseira',]
write.csv(expanded4,'expanded_mfg_library_1062020.csv')
# define the package name
thePackage <- "algaeClassify"
# set directory to the package development folder
setwd("~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
rm(list='traitranges')
roxygenize('.')
###############################################################################
# package creation & maintenance file
# M.J. Lajeunesse, R course 7/5/16
###############################################################################
# define the package name
thePackage <- "algaeClassify"
# set directory to the package development folder
setwd("~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
rm(list='traitranges')
roxygenize('.')
# STEP 2, add functionality ###################################################
# (1) update DESCRIPTION file (package description, authors, dependencies)
# (2) add functions (*.R) in R folder of package
# (3) within *.R files should include roxygen2 markdown of function and
#     parameter txt (e.g., what you see in manual)
###############################################################################
# add dataset to package
lakegeneva <- read.csv('../../lakegeneva.csv')
# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
use_data(lakegeneva, overwrite = TRUE)
rimet_mfgtraits<-read.csv('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/Frederic_MFGtraits.csv')
mfgTraits=rimet_mfgtraits[!is.na(rimet_mfgtraits$MFG.fromtraits),]
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")}
names(mfgTraits)<-sapply(names(mfgTraits),.simpleCap)
names(mfgTraits)[1]='phyto_name'
names(mfgTraits)[2:3]=c('genus','species')
use_data(mfgTraits,overwrite=TRUE)
fred.csrtraits<-read.csv('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/Fred_CSRtraits_numericClassCorrection.csv')
csrTraits<-fred.csrtraits
csrTraits<-genus_species_extract(csrTraits,'phyto_name')
csrTraits$phyto_name<-paste(csrTraits$genus,csrTraits$species)
csrTraits$phyto_name<-trimws(csrTraits$phyto_name)
use_data(csrTraits,overwrite=TRUE)
mfg_csr_library<-read.csv('~/gleon/Geisha/phyto_package/mee ms/mfg_csr_library.csv')
use_data(mfg_csr_library,overwrite=TRUE)
# setwd('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/')# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
#
# load('sppMFG.rda')
# setwd('data/')
# load('species.mfg.library.rda')
# setwd('..')
# use_data(species.mfg.library, overwrite = TRUE)
setwd('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/')
load('traitranges.rda')
traitranges=traitranges[1:3,]
traitranges$units=c('um^-1','um','')
use_data(traitranges, overwrite = TRUE)
setwd('~/gleon/Geisha/jennie MFG/')
species_mfg_library<-read.csv('expanded_mfg_library_1062020.csv')
species_mfg_library<-subset(species_mfg_library,select=c('genus','species','MFG','source'))
use_data(species_mfg_library,overwrite=TRUE)
setwd('~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/algaeClassify/')
rm(list='traitranges')
# STEP 3, error check and compile package for CRAN ############################
# (1) update DESCRIPTION file
# (2) add functions (*.R) in R folder of package
###############################################################################
# constructs binaries
library(devtools);
# creates bundle to submit to CRAN (*.tar.zip file found in development folder)
build('.', manual = FALSE)
# error checks prior to submission (all errors and warnings need to be addressed)
check('.')
warning()
setwd('..')
document(thePackage)
path <- find.package(thePackage)
library(devtools)
install_github('vppatil/GEISHA_phytoplankton/package builds/algaeClassify',ref='working')
