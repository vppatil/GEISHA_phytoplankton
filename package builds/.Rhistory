build('.', manual = FALSE)
# error checks prior to submission (all errors and warnings need to be addressed)
rm(list=ls())
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
check('.',cran=FALSE)
###############################################################################
# package creation & maintenance file
# M.J. Lajeunesse, R course 7/5/16
###############################################################################
rm(list=ls())
# define the package name
thePackage <- "algaeClassify"
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
rm(list='traitranges')
roxygenize('.')
# STEP 2, add functionality ###################################################
# (1) update DESCRIPTION file (package description, authors, dependencies)
# (2) add functions (*.R) in R folder of package
# (3) within *.R files should include roxygen2 markdown of function and
#     parameter txt (e.g., what you see in manual)
###############################################################################
# add dataset to package
lakegeneva <- read.csv('../../lakegeneva.csv')
# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
use_data(lakegeneva, overwrite = TRUE)
rimet_mfgtraits<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/Frederic_MFGtraits.csv')
mfgTraits=rimet_mfgtraits[!is.na(rimet_mfgtraits$MFG.fromtraits),]
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")}
names(mfgTraits)<-sapply(names(mfgTraits),.simpleCap)
names(mfgTraits)[1]='phyto_name'
names(mfgTraits)[2:3]=c('genus','species')
use_data(mfgTraits,overwrite=TRUE)
fred.csrtraits<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/Fred_CSRtraits_numericClassCorrection.csv')
csrTraits<-fred.csrtraits
csrTraits<-genus_species_extract(csrTraits,'phyto_name')
csrTraits$phyto_name<-paste(csrTraits$genus,csrTraits$species)
csrTraits$phyto_name<-trimws(csrTraits$phyto_name)
use_data(csrTraits,overwrite=TRUE)
mfg_csr_library<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/mee ms/mfg_csr_library.csv')
use_data(mfg_csr_library,overwrite=TRUE)
# setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/')# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
#
# load('sppMFG.rda')
# setwd('data/')
# load('species.mfg.library.rda')
# setwd('..')
# use_data(species.mfg.library, overwrite = TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/')
load('traitranges.rda')
traitranges=traitranges[1:3,]
traitranges$units=c('um^-1','um','')
use_data(traitranges, overwrite = TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/jennie MFG/')
species_mfg_library<-read.csv('expanded_mfg_library_2_1_2021.csv')
species_mfg_library<-subset(species_mfg_library,select=c('genus','species','MFG','source'))
species_mfg_library$MFG<-gsub('6a-LargeCent','6a1-LargeCent',species_mfg_library$MFG)
use_data(species_mfg_library,overwrite=TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/algaeClassify/')
rm(list='traitranges')
# STEP 3, error check and compile package for CRAN ############################
# (1) update DESCRIPTION file
# (2) add functions (*.R) in R folder of package
###############################################################################
# constructs binaries
library(devtools);
# creates bundle to submit to CRAN (*.tar.zip file found in development folder)
build('.', manual = FALSE)
# error checks prior to submission (all errors and warnings need to be addressed)
rm(list=ls())
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
check('.',cran=FALSE)
warning()
library(devtools)
library(utils)
#install and load the most recent package version from vijay patil's github account
install_github('vppatil/GEISHA_phytoplankton/package builds/algaeClassify',ref='working',upgrade = "never")
library(algaeClassify)
lakephyto<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/datasets/phyto_data/RawPhytoData_Muggelsee_QAQC_31Aug2017.csv')
#create a list of unique species names from the lake
lakephytospp<-data.frame(phyto_name=unique(lakephyto$phyto_name))
#separate out genus and species, and clean up name formatting
lakephytospp<-genus_species_extract(lakephytospp,'phyto_name')
#load csr and mfg trait databases
data(csrTraits)
data(mfgTraits)
#merge trait data into species data
csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
#keep all species- assign NA if no trait values are available
lakephytospp<-merge(lakephytospp,csrTraits,all.x=T)
lakephytospp<-merge(lakephytospp,mfgTraits,all.x=T)
#assign morphofunctional groups based on Traits
lakephytospp$MFGfromTraits<-traits_to_mfg_df(lakephytospp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
#classify the remaining species based on pre-defined libraries.
# data("species_mfg_library") #you can load the species mfg library if you want, but it is not necessary.
lakephytospp<-species_to_mfg_df(lakephytospp,flag=2) #flag = 2 allows for manual resolution of ambiguous classifications
data("species_mfg_library")
species_mfg_library[grep('Chrysophyceae',species_mfg_library$genus)]
species_mfg_library[grep('Chrysophyceae',species_mfg_library$genus),]
species_mfg_library[grep('Chlorophyceae',species_mfg_library$genus),]
species_mfg_library[grep('Chlorophyceae',species_mfg_library$genus),]
species_mfg_library[grep('Chlorophyceae',species_mfg_library$genus),]
species_mfg_library[grep('Chlorophyceae ',species_mfg_library$genus),]
species_to_mfg("Chlorophyceae")
source('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/algaeClassify/R/species_to_mfg.r', echo=TRUE)
species_to_mfg("Chlorophyceae")
species_to_mfg("Chlorophyceae","flag=2")
#load helper library for installing packages from github
# install.packages('devtools')
library(devtools)
library(utils)
#install and load the most recent package version from vijay patil's github account
install_github('vppatil/GEISHA_phytoplankton/package builds/algaeClassify',ref='working',upgrade = "never")
library(algaeClassify)
#read in the data file you want to classify
lakephyto<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/datasets/phyto_data/RawPhytoData_Muggelsee_QAQC_31Aug2017.csv')
#create a list of unique species names from the lake
lakephytospp<-data.frame(phyto_name=unique(lakephyto$phyto_name))
#separate out genus and species, and clean up name formatting
lakephytospp<-genus_species_extract(lakephytospp,'phyto_name')
#load csr and mfg trait databases
data(csrTraits)
data(mfgTraits)
#merge trait data into species data
csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
#keep all species- assign NA if no trait values are available
lakephytospp<-merge(lakephytospp,csrTraits,all.x=T)
lakephytospp<-merge(lakephytospp,mfgTraits,all.x=T)
#assign morphofunctional groups based on Traits
lakephytospp$MFGfromTraits<-traits_to_mfg_df(lakephytospp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
#classify the remaining species based on pre-defined libraries.
# data("species_mfg_library") #you can load the species mfg library if you want, but it is not necessary.
lakephytospp<-species_to_mfg_df(lakephytospp,flag=2) #flag = 2 allows for manual resolution of ambiguous classifications
library("species_mfg_library")
data("species_mfg_library")
head(species_mfg_library)
grep("Chlorophyceae",species_mfg_library$genus)
grep("Chlorophyceae",species_mfg_library$species)
source('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/algaeClassify/R/species_to_mfg_df.r', echo=TRUE)
#classify the remaining species based on pre-defined libraries.
# data("species_mfg_library") #you can load the species mfg library if you want, but it is not necessary.
lakephytospp<-species_to_mfg_df(lakephytospp,flag=2) #flag = 2 allows for manual resolution of ambiguous classifications
lakephytospp[33,]
species_to_mfg(genus="Chlorophyceae",species="")
species_to_mfg(genus="Chlorophyceae",species="",flag=2)
genus="Chlorophyceae"
species=""
flag=2
library(algaeClassify)
if(!is.data.frame(mfgDbase))
{
mfgDbase<-algaeClassify::species_mfg_library
}
mfgDbase=NA
if(!is.data.frame(mfgDbase))
{
mfgDbase<-algaeClassify::species_mfg_library
}
mfgDbase<-mfgDbase[!duplicated(mfgDbase),]
#create vector for indicator if name is ambiguous or not.
ambiguous.mfg=0
#vector indicating if mfg classification was based on genus-level match.
genus.classification=0
#vector indicating whether the bestmatch function was used or not.
partial.match=0
genus=gsub('Unknown ','',genus)
if(species %in% mfgDbase$species==F){species=''}#replacing spp., sp. etc. with ''
#hardcoding a match
if(genus=='Hyloraphidium'){genus='Hyaloraphidium'}
if(species==''){genus.classification=1}
#check for genus and species match first.
mfg=mfgDbase$MFG[mfgDbase$genus==genus &
mfgDbase$species==species]
#go to genus match
if(length(unique(mfg)==1))
{
mfg=unique(mfg)
}else{
species=''
mfg=mfgDbase$MFG[mfgDbase$genus==genus & mfgDbase$species==species]
genus.classification=1
}
#if there is no genus only match, see if there is another species with the same genus
if(length(unique(mfg))==0)
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus]
genus.classification=1
}
if(length(unique(mfg))==0)
{
#try for fuzzy genus matching
genus.bestmatch<-bestmatch(enteredName=genus,possibleNames=unique(mfgDbase$genus))
if(genus.bestmatch != 'multiplePartialMatches' & !is.na(genus.bestmatch))
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus.bestmatch]
genus.classification=1
partial.match=1
}
}
length(unique(mfg))
mfg
mfgDbase<-mfgDbase[!duplicated(mfgDbase),]
#create vector for indicator if name is ambiguous or not.
ambiguous.mfg=0
#vector indicating if mfg classification was based on genus-level match.
genus.classification=0
#vector indicating whether the bestmatch function was used or not.
partial.match=0
genus=gsub('Unknown ','',genus)
if(species %in% mfgDbase$species==F){species=''}#replacing spp., sp. etc. with ''
#hardcoding a match
if(genus=='Hyloraphidium'){genus='Hyaloraphidium'}
if(species==''){genus.classification=1}
#check for genus and species match first.
mfg=mfgDbase$MFG[mfgDbase$genus==genus &
mfgDbase$species==species]
mfg
if(length(unique(mfg)==1))
{
mfg=unique(mfg)
}else{
species=''
mfg=mfgDbase$MFG[mfgDbase$genus==genus & mfgDbase$species==species]
genus.classification=1
}
mfg
#if there is no genus only match, see if there is another species with the same genus
if(length(unique(mfg))==0)
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus]
genus.classification=1
}
if(length(unique(mfg))==0)
{
#try for fuzzy genus matching
genus.bestmatch<-bestmatch(enteredName=genus,possibleNames=unique(mfgDbase$genus))
if(genus.bestmatch != 'multiplePartialMatches' & !is.na(genus.bestmatch))
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus.bestmatch]
genus.classification=1
partial.match=1
}
}
genus.bestmatch
#' Conversion of a single genus and species name to a single MFG. Uses species.mfg.library
#'
#' @param genus Character string: genus name
#' @param species Character string: species name
#' @param flag Resolve ambiguous mfg: 1 = return(NA),2= manual selection
#' @param mfgDbase data.frame of species MFG classifications. Defaults to the supplied species.mfg.library data object
#'
#' @export species_to_mfg
#'
#' @return a data frame with MFG classification and diagnostic information.
#' ambiguous.mfg=1 if multiple possible mfg matches
#' genus.classification=1 if no exact match was found with genus + species name
#' partial.match=1 if mfg was based on fuzzy matching of taxonomic name.
#'
#' @examples
#' species_to_mfg('Scenedesmus','bijuga')
#' #returns "11a-NakeChlor"
species_to_mfg<-function(genus,species="",flag=1,mfgDbase=NA)#set flag to two if you want to
#manually resolve ambiguous mfg class.
#default behavior is to set ambiguous classes to NA (flag=1)
{
if(!is.data.frame(mfgDbase))
{
mfgDbase<-algaeClassify::species_mfg_library
}
mfgDbase<-mfgDbase[!duplicated(mfgDbase),]
#create vector for indicator if name is ambiguous or not.
ambiguous.mfg=0
#vector indicating if mfg classification was based on genus-level match.
genus.classification=0
#vector indicating whether the bestmatch function was used or not.
partial.match=0
genus=gsub('Unknown ','',genus)
if(species %in% mfgDbase$species==F){species=''}#replacing spp., sp. etc. with ''
#hardcoding a match
if(genus=='Hyloraphidium'){genus='Hyaloraphidium'}
if(species==''){genus.classification=1}
#check for genus and species match first.
mfg=mfgDbase$MFG[mfgDbase$genus==genus &
mfgDbase$species==species]
#go to genus match
if(length(unique(mfg)==1))
{
mfg=unique(mfg)
}else{
species=''
mfg=mfgDbase$MFG[mfgDbase$genus==genus & mfgDbase$species==species]
genus.classification=1
}
#if there is no genus only match, see if there is another species with the same genus
if(length(unique(mfg))==0)
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus]
genus.classification=1
}
if(length(unique(mfg))==0)
{
#try for fuzzy genus matching
genus.bestmatch<-bestmatch(enteredName=genus,possibleNames=unique(mfgDbase$genus))
if(genus.bestmatch != 'multiplePartialMatches' & !is.na(genus.bestmatch))
{
mfg=mfgDbase$MFG[mfgDbase$genus==genus.bestmatch]
genus.classification=1
partial.match=1
}
}
#now, mfg length should be 0, 1, or 2
if(length(unique(mfg[!is.na(mfg)]))==2)#flag 2 means you can interactively
#choose among two possible mfgs for a particular genus or species
{
ambiguous.mfg=1
if(flag==1)
{
mfg=NA
}else if (flag==2)
{
mfg=unique(mfg)
cat(paste('\n two possible mfgs for the species: ',genus,species))
cat()
cat(paste('\n1:',mfg[1]))
cat(paste('\n2:',mfg[2]))
cat(paste('\n3:', NA))
choice=as.numeric(readline(prompt='\nenter your choice: (1,2,3): \n'))
mfg=mfg[choice]
}
}
mfg<-unique(mfg[!is.na(mfg)])
if(length(mfg)==0 )
{
mfg=NA
}else
{
mfg=mfg[1]
}
mfg.df<-data.frame(MFG=mfg,
ambiguous.mfg=ambiguous.mfg,
genus.classification=genus.classification,
partial.match=partial.match,
flag=flag)
return(mfg.df)
}
###############################################################################
# package creation & maintenance file
# M.J. Lajeunesse, R course 7/5/16
###############################################################################
rm(list=ls())
# define the package name
thePackage <- "algaeClassify"
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
rm(list='traitranges')
roxygenize('.')
# STEP 2, add functionality ###################################################
# (1) update DESCRIPTION file (package description, authors, dependencies)
# (2) add functions (*.R) in R folder of package
# (3) within *.R files should include roxygen2 markdown of function and
#     parameter txt (e.g., what you see in manual)
###############################################################################
# add dataset to package
lakegeneva <- read.csv('../../lakegeneva.csv')
# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
use_data(lakegeneva, overwrite = TRUE)
rimet_mfgtraits<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/Frederic_MFGtraits.csv')
mfgTraits=rimet_mfgtraits[!is.na(rimet_mfgtraits$MFG.fromtraits),]
.simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2),
sep = "", collapse = " ")}
names(mfgTraits)<-sapply(names(mfgTraits),.simpleCap)
names(mfgTraits)[1]='phyto_name'
names(mfgTraits)[2:3]=c('genus','species')
use_data(mfgTraits,overwrite=TRUE)
fred.csrtraits<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/Fred_CSRtraits_numericClassCorrection.csv')
csrTraits<-fred.csrtraits
csrTraits<-genus_species_extract(csrTraits,'phyto_name')
csrTraits$phyto_name<-paste(csrTraits$genus,csrTraits$species)
csrTraits$phyto_name<-trimws(csrTraits$phyto_name)
use_data(csrTraits,overwrite=TRUE)
mfg_csr_library<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/mee ms/mfg_csr_library.csv')
use_data(mfg_csr_library,overwrite=TRUE)
# setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/')# use_data(library_MFG, pkg = thePackage, internal = TRUE, overwrite = TRUE)
#
# load('sppMFG.rda')
# setwd('data/')
# load('species.mfg.library.rda')
# setwd('..')
# use_data(species.mfg.library, overwrite = TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/')
load('traitranges.rda')
traitranges=traitranges[1:3,]
traitranges$units=c('um^-1','um','')
use_data(traitranges, overwrite = TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/jennie MFG/')
species_mfg_library<-read.csv('expanded_mfg_library_2_1_2021.csv')
species_mfg_library<-subset(species_mfg_library,select=c('genus','species','MFG','source'))
species_mfg_library$MFG<-gsub('6a-LargeCent','6a1-LargeCent',species_mfg_library$MFG)
use_data(species_mfg_library,overwrite=TRUE)
setwd('C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/algaeClassify/')
rm(list='traitranges')
# STEP 3, error check and compile package for CRAN ############################
# (1) update DESCRIPTION file
# (2) add functions (*.R) in R folder of package
###############################################################################
# constructs binaries
library(devtools);
# creates bundle to submit to CRAN (*.tar.zip file found in development folder)
build('.', manual = FALSE)
# error checks prior to submission (all errors and warnings need to be addressed)
rm(list=ls())
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create(thePackage)
setwd('algaeClassify')
check('.',cran=FALSE)
warning()
setwd('..')
document(thePackage)
path <- find.package(thePackage)
system(paste(shQuote(file.path(R.home("bin"), "R")), "CMD", "Rd2pdf", shQuote(path)))
setwd('..')
thePackage='algaeClassify'
document(thePackage)
# set directory to the package development folder
setwd("C:/Users/vpatil/OneDrive - DOI/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# create(thePackage)
setwd('algaeClassify')
setwd('..')
thePackage='algaeClassify'
document(thePackage)
path <- find.package(thePackage)
system(paste(shQuote(file.path(R.home("bin"), "R")), "CMD", "Rd2pdf", shQuote(path)))
system(paste(shQuote(file.path(R.home("bin"), "R")), "CMD", "Rd2pdf", shQuote(path)))
#load helper library for installing packages from github
# install.packages('devtools')
library(devtools)
library(utils)
#install and load the most recent package version from vijay patil's github account
install_github('vppatil/GEISHA_phytoplankton/package builds/algaeClassify',ref='working',upgrade = "never")
library(algaeClassify)
#read in the data file you want to classify
lakephyto<-read.csv('C:/Users/vpatil/OneDrive - DOI/Geisha_main/datasets/phyto_data/RawPhytoData_Muggelsee_QAQC_31Aug2017.csv')
#create a list of unique species names from the lake
lakephytospp<-data.frame(phyto_name=unique(lakephyto$phyto_name))
#separate out genus and species, and clean up name formatting
lakephytospp<-genus_species_extract(lakephytospp,'phyto_name')
#load csr and mfg trait databases
data(csrTraits)
data(mfgTraits)
#merge trait data into species data
csrTraits<-subset(csrTraits,select=c('phyto_name','SAV','MLD','MSV'))
mfgTraits<-mfgTraits[,!names(mfgTraits) %in% c('genus','species','MFG.fromtraits')]
#keep all species- assign NA if no trait values are available
lakephytospp<-merge(lakephytospp,csrTraits,all.x=T)
lakephytospp<-merge(lakephytospp,mfgTraits,all.x=T)
#assign morphofunctional groups based on Traits
lakephytospp$MFGfromTraits<-traits_to_mfg_df(lakephytospp,arg.names = c('Mobility.apparatus','Size','Colonial','Filament','Centric','Gelatinous','Aerotopes','Class','Order'))
#classify the remaining species based on pre-defined libraries.
# data("species_mfg_library") #you can load the species mfg library if you want, but it is not necessary.
lakephytospp<-species_to_mfg_df(lakephytospp,flag=2)
rm(list=ls())
#load helper library for installing packages from github
# install.packages('devtools')
library(devtools)
library(utils)
#install and load the most recent package version from vijay patil's github account
install_github('vppatil/GEISHA_phytoplankton/package builds/algaeClassify',ref='working',upgrade = "never")
library(algaeClassify)
detach("algaeClassify")
